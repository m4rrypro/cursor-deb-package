name: Build Cursor .deb Package

on:
  schedule:
    # Check for updates daily at 6 AM UTC
    - cron: '0 6 * * *'
  workflow_dispatch:
    # Allow manual triggering
  push:
    branches: [ main ]
    paths:
      - 'scripts/**'
      - '.github/workflows/**'

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      should-build: ${{ steps.version-check.outputs.should-build }}
      latest-version: ${{ steps.version-check.outputs.latest-version }}
      current-version: ${{ steps.version-check.outputs.current-version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check for new Cursor version
        id: version-check
        run: |
          # Try multiple methods to get Cursor version
          LATEST_VERSION=""
          
          # Method 1: Try the API (may return HTML instead of JSON)
          echo "Trying Cursor API..."
          API_URL="https://www.cursor.com/api/download?platform=linux-x64&releaseTrack=stable"
          USER_AGENT="Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"
          
          API_RESPONSE=$(curl -sL -A "$USER_AGENT" "$API_URL" 2>/dev/null || echo "")
          
          # Check if response looks like JSON
          if echo "$API_RESPONSE" | jq empty 2>/dev/null; then
            LATEST_VERSION=$(echo "$API_RESPONSE" | jq -r '.version // empty' 2>/dev/null || echo "")
            echo "Got version from API: $LATEST_VERSION"
          else
            echo "API returned non-JSON response, trying alternative methods..."
          fi
          
          # Method 2: Try to get version from download page
          if [ -z "$LATEST_VERSION" ] || [ "$LATEST_VERSION" = "null" ]; then
            echo "Trying to extract version from download page..."
            VERSION_FROM_PAGE=$(curl -sL "https://cursor.com/" | grep -oE 'cursor-[0-9]+\.[0-9]+\.[0-9]+' | head -1 | sed 's/cursor-//' || echo "")
            if [ -n "$VERSION_FROM_PAGE" ]; then
              LATEST_VERSION="$VERSION_FROM_PAGE"
              echo "Got version from page: $LATEST_VERSION"
            fi
          fi
          
          # Method 3: Fall back to date-based versioning
          if [ -z "$LATEST_VERSION" ] || [ "$LATEST_VERSION" = "null" ]; then
            TIMESTAMP=$(date +"%Y%m%d")
            LATEST_VERSION="1.0.${TIMESTAMP}"
            echo "Using date-based version: $LATEST_VERSION"
          fi
          
          echo "Final latest version: $LATEST_VERSION"
          
          # Get current version from our releases (if any)
          CURRENT_VERSION=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r '.tag_name // "none"' 2>/dev/null || echo "none")
          echo "Current version: $CURRENT_VERSION"
          
          # Build if:
          # 1. No previous release exists
          # 2. Version has changed
          # 3. Manual trigger
          # 4. Push to main (for testing)
          if [ "$CURRENT_VERSION" = "none" ] || [ "$LATEST_VERSION" != "$CURRENT_VERSION" ] || [ "${{ github.event_name }}" = "workflow_dispatch" ] || [ "${{ github.event_name }}" = "push" ]; then
            echo "Building: Version change detected or manual trigger"
            echo "should-build=true" >> $GITHUB_OUTPUT
          else
            echo "No build needed: Version unchanged ($LATEST_VERSION)"
            echo "should-build=false" >> $GITHUB_OUTPUT
          fi
          
          echo "latest-version=$LATEST_VERSION" >> $GITHUB_OUTPUT
          echo "current-version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

  build-deb:
    needs: check-version
    if: needs.check-version.outputs.should-build == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'push'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y wget curl jq fuse

      - name: Download Cursor AppImage
        run: |
          chmod +x scripts/download-cursor.sh
          ./scripts/download-cursor.sh

      - name: Convert to .deb package
        run: |
          chmod +x scripts/convert-to-deb.sh
          ./scripts/convert-to-deb.sh

      - name: Get package info
        id: package-info
        run: |
          VERSION=$(cat downloads/version.txt)
          DEB_FILE=$(ls output/*.deb | head -1)
          DEB_NAME=$(basename "$DEB_FILE")
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "deb-file=$DEB_FILE" >> $GITHUB_OUTPUT
          echo "deb-name=$DEB_NAME" >> $GITHUB_OUTPUT
          
          # Get file size
          SIZE=$(du -h "$DEB_FILE" | cut -f1)
          echo "size=$SIZE" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.package-info.outputs.version }}
          release_name: Cursor ${{ steps.package-info.outputs.version }} .deb Package
          body: |
            ## Cursor ${{ steps.package-info.outputs.version }} .deb Package
            
            This release contains the Cursor code editor converted from AppImage to .deb package format.
            
            ### Installation
            ```bash
            wget https://github.com/${{ github.repository }}/releases/download/${{ steps.package-info.outputs.version }}/${{ steps.package-info.outputs.deb-name }}
            sudo dpkg -i ${{ steps.package-info.outputs.deb-name }}
            sudo apt-get install -f  # Fix any dependency issues
            ```
            
            ### Package Details
            - **Version**: ${{ steps.package-info.outputs.version }}
            - **Architecture**: amd64
            - **Size**: ${{ steps.package-info.outputs.size }}
            - **Source**: [Cursor Official Downloads](https://cursor.com/downloads)
            
            ### What's New
            Check the [official Cursor website](https://cursor.com) for details about this version.
            
            ---
            *This package was automatically generated from the official Cursor AppImage.*
          draft: false
          prerelease: false

      - name: Upload .deb Package
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: ${{ steps.package-info.outputs.deb-file }}
          asset_name: ${{ steps.package-info.outputs.deb-name }}
          asset_content_type: application/vnd.debian.binary-package

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cursor-deb-${{ steps.package-info.outputs.version }}
          path: |
            output/*.deb
            downloads/version.txt
            downloads/filename.txt
          retention-days: 30

  notify:
    needs: [check-version, build-deb]
    if: always() && needs.build-deb.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: Notification
        run: |
          echo "âœ… Successfully built Cursor .deb package for version ${{ needs.check-version.outputs.latest-version }}"
          echo "ðŸ“¦ Package available at: https://github.com/${{ github.repository }}/releases/tag/${{ needs.check-version.outputs.latest-version }}"
